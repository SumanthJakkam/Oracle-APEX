CREATE OR REPLACE PACKAGE TC_EMP_CONFIG_PKG
AS

FUNCTION TC_GENERATE_EMP_NUMBER(P_EMP_ID    NUMBER)
RETURN VARCHAR2;

FUNCTION CHECK_EMP_EXISTS(P_EMAIL    VARCHAR2)
RETURN BOOLEAN;

PROCEDURE CREATE_EMPLOYEE
(
P_FIRST_NAME       VARCHAR2,
P_LAST_NAME        VARCHAR2,
P_START_DATE       DATE,
P_END_DATE         DATE,
P_DATE_OF_BIRTH    DATE,
P_EMAIL            VARCHAR2,
P_APPROVER         VARCHAR2,
P_USER_NAME        VARCHAR2,
P_PASSWORD         VARCHAR2,
P_USER_ROLES       VARCHAR2,
P_USER             VARCHAR2,
X_STATUS    OUT    VARCHAR2,
X_EMP_ID    OUT    NUMBER,
X_EMP_NUMBER OUT   VARCHAR2,
X_USER_ID    OUT   NUMBER
                   );
				   
				   
PROCEDURE UPDATE_EMPLOYEE
(
P_EMP_ID           NUMBER,
P_USER_ID          NUMBER,
P_FIRST_NAME       VARCHAR2,
P_LAST_NAME        VARCHAR2,
P_START_DATE       DATE,
P_END_DATE         DATE,
P_DATE_OF_BIRTH    DATE,
P_EMAIL            VARCHAR2,
P_APPROVER         VARCHAR2,
P_USER_NAME        VARCHAR2,
P_PASSWORD         VARCHAR2,
P_USER_ROLES       VARCHAR2,
P_USER             VARCHAR2,
X_STATUS    OUT    VARCHAR2
                   );

END TC_EMP_CONFIG_PKG;
/


CREATE OR REPLACE PACKAGE BODY TC_EMP_CONFIG_PKG
AS

FUNCTION TC_GENERATE_EMP_NUMBER(P_EMP_ID    NUMBER)
RETURN VARCHAR2
AS
L_EMP_NUMBER     VARCHAR2(50);
BEGIN
L_EMP_NUMBER := 'GSTS'||P_EMP_ID;
RETURN L_EMP_NUMBER;

EXCEPTION
WHEN OTHERS THEN
RETURN NULL;
END TC_GENERATE_EMP_NUMBER;

FUNCTION CHECK_EMP_EXISTS(P_EMAIL    VARCHAR2)
RETURN BOOLEAN

AS
L_CNT    NUMBER;
BEGIN

SELECT COUNT(*)
INTO L_CNT
FROM TC_EMPLOYEE
WHERE UPPER(EMAIL) = UPPER(P_EMAIL);

IF L_CNT <> 0 THEN
RETURN TRUE;
ELSE
RETURN FALSE;
END IF;

EXCEPTION
WHEN OTHERS THEN
RETURN FALSE;

END CHECK_EMP_EXISTS;

PROCEDURE CREATE_EMPLOYEE
(
P_FIRST_NAME       VARCHAR2,
P_LAST_NAME        VARCHAR2,
P_START_DATE       DATE,
P_END_DATE         DATE,
P_DATE_OF_BIRTH    DATE,
P_EMAIL            VARCHAR2,
P_APPROVER         VARCHAR2,
P_USER_NAME        VARCHAR2,
P_PASSWORD         VARCHAR2,
P_USER_ROLES       VARCHAR2,
P_USER             VARCHAR2,
X_STATUS   OUT     VARCHAR2,
X_EMP_ID    OUT    NUMBER,
X_EMP_NUMBER OUT   VARCHAR2,
X_USER_ID    OUT   NUMBER
                   )
IS

L_EMP_EXISTS     BOOLEAN;
L_EMP_NUMBER     VARCHAR2(100);
L_FULL_NAME      VARCHAR2(150);
L_APPROVER_ID    NUMBER;
L_APPROVER_NUMBER  NUMBER;
L_EMP_ID           NUMBER;
L_USER_ID          NUMBER;
BEGIN
L_EMP_EXISTS := CHECK_EMP_EXISTS(P_EMAIL);

  BEGIN
    SELECT EMP_ID, EMP_NUMBER
    INTO   L_APPROVER_ID, L_APPROVER_NUMBER
    FROM   TC_EMPLOYEE
    WHERE  FULL_NAME = P_APPROVER;
    
  EXCEPTION
  WHEN OTHERS THEN
  L_APPROVER_ID := NULL;
  L_APPROVER_NUMBER := NULL;
  END;

IF L_EMP_EXISTS = FALSE THEN

L_EMP_ID     := TC_EMPLOYEE_SEQ.NEXTVAL;
L_EMP_NUMBER := TC_GENERATE_EMP_NUMBER(L_EMP_ID);
L_FULL_NAME  := P_FIRST_NAME||' '||P_LAST_NAME;
L_USER_ID    := TC_USER_SEQ.NEXTVAL;


  BEGIN
  INSERT INTO TC_EMPLOYEE
  (EMP_ID, EMP_NUMBER, FIRST_NAME, LAST_NAME, FULL_NAME, START_DATE, END_DATE, 
   EMP_DOB, EMAIL, APPROVER, APPROVER_ID, APPROVER_NUMBER, CREATION_DATE, CREATED_BY, LAST_UPDATE_DATE, LAST_UPDATED_BY)
  VALUES
  (
  L_EMP_ID,
  L_EMP_NUMBER,
  P_FIRST_NAME,
  P_LAST_NAME,
  L_FULL_NAME,
  P_START_DATE,
  P_END_DATE,
  P_DATE_OF_BIRTH,
  P_EMAIL,
  P_APPROVER,
  L_APPROVER_ID,
  L_APPROVER_NUMBER,
  SYSDATE,
  P_USER,
  SYSDATE,
  P_USER
  );
  
  INSERT INTO TC_USER(
    USER_ID,
    USER_NAME,
    USER_PASSWORD,
    EMP_ID,
    USER_ROLES,
    CREATION_DATE,
    CREATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATED_BY
    )
 VALUES(L_USER_ID,
        P_USER_NAME,
        P_PASSWORD,
        L_EMP_ID,
        P_USER_ROLES,
		SYSDATE,
		P_USER,
        SYSDATE,
        P_USER
		);
  
  
  COMMIT;
  X_STATUS := 'S';
  X_EMP_ID := L_EMP_ID;
  X_EMP_NUMBER := L_EMP_NUMBER;
  X_USER_ID    := L_USER_ID;
  
  EXCEPTION
  WHEN OTHERS THEN
  X_STATUS := 'U';
  END;


END IF;


END CREATE_EMPLOYEE;


PROCEDURE UPDATE_EMPLOYEE
(
P_EMP_ID           NUMBER,
P_USER_ID          NUMBER,
P_FIRST_NAME       VARCHAR2,
P_LAST_NAME        VARCHAR2,
P_START_DATE       DATE,
P_END_DATE         DATE,
P_DATE_OF_BIRTH    DATE,
P_EMAIL            VARCHAR2,
P_APPROVER         VARCHAR2,
P_USER_NAME        VARCHAR2,
P_PASSWORD         VARCHAR2,
P_USER_ROLES       VARCHAR2,
P_USER             VARCHAR2,
X_STATUS    OUT    VARCHAR2
                   )
IS
L_LENGTH          NUMBER;
L_APPROVER_ID     NUMBER;
L_FULL_NAME       VARCHAR2(150);
L_APPROVER_NUMBER VARCHAR2(150);

BEGIN

L_FULL_NAME := P_FIRST_NAME||' '||P_LAST_NAME;

  BEGIN
    SELECT EMP_ID, EMP_NUMBER
    INTO   L_APPROVER_ID, L_APPROVER_NUMBER
    FROM   TC_EMPLOYEE
    WHERE  FULL_NAME = P_APPROVER;
    
  EXCEPTION
  WHEN OTHERS THEN
  L_APPROVER_ID := NULL;
  L_APPROVER_NUMBER := NULL;
  END;
  
SELECT LENGTH(P_PASSWORD) INTO L_LENGTH FROM DUAL;


BEGIN
UPDATE TC_EMPLOYEE
SET    FIRST_NAME    = P_FIRST_NAME,
       LAST_NAME     = P_LAST_NAME,
	   FULL_NAME     = L_FULL_NAME,
	   START_DATE    = P_START_DATE,
	   END_DATE      = P_END_DATE,
	   EMP_DOB       = P_DATE_OF_BIRTH,
	   EMAIL         = P_EMAIL,
	   APPROVER      = P_APPROVER,
	   APPROVER_ID   = L_APPROVER_ID,
	   APPROVER_NUMBER  = L_APPROVER_NUMBER,
	   LAST_UPDATE_DATE = SYSDATE,
	   LAST_UPDATED_BY  = P_USER
WHERE  EMP_ID   = P_EMP_ID;

UPDATE TC_USER 
SET    USER_NAME   = P_USER_NAME,
       USER_ROLES  = P_USER_ROLES,
	   LAST_UPDATE_DATE = SYSDATE,
	   LAST_UPDATED_BY  = P_USER
WHERE  USER_ID  = P_USER_ID;

IF L_LENGTH > 0 THEN

UPDATE TC_USER
SET    USER_PASSWORD = P_PASSWORD
WHERE  USER_ID = P_USER_ID;

END IF;

COMMIT;
X_STATUS := 'S';

EXCEPTION
WHEN OTHERS THEN
X_STATUS := 'U';
	   
END;


END UPDATE_EMPLOYEE;

END TC_EMP_CONFIG_PKG;